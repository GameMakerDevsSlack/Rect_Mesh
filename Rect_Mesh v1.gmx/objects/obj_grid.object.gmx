<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

cell_width      = 32;
cell_height     = 32;
grid_width      = 30;
grid_height     = 22;
grid_world_left = 32;
grid_world_top  = 32;

grid_world_width  = cell_width  * grid_width;
grid_world_height = cell_height * grid_height;
grid_world_right  = grid_world_left + grid_world_width;
grid_world_bottom = grid_world_top  + grid_world_height;

grd_blocks = ds_grid_create( grid_width, grid_height );

mouse_grid_x = 0;
mouse_grid_y = 0;

grd_regions = ds_grid_create( grid_width, grid_height );
map_regions = ds_map_create();
lst_regions = ds_list_create();
regions_total = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

mouse_grid_x = ( mouse_x - grid_world_left ) div cell_width;
mouse_grid_y = ( mouse_y - grid_world_top  ) div cell_height;

if ( point_in_rectangle( mouse_grid_x, mouse_grid_y,   0, 0, grid_width - 1, grid_height - 1 ) ) {
    
    if ( mouse_check_button( mb_left  ) ) {
        regions_total = 0;
        grd_blocks[# mouse_grid_x, mouse_grid_y ] = 1;
    }
    
    if ( mouse_check_button( mb_right ) ) {
        regions_total = 0;
        grd_blocks[# mouse_grid_x, mouse_grid_y ] = 0;
    }
    
}

if ( keyboard_check_pressed( vk_space ) ) {
    
    ds_grid_clear( grd_regions, 0 );
    ds_map_clear( map_regions );
    ds_list_clear( lst_regions );
    regions_total = 0;
    
    for( var _y = 0; _y &lt; grid_height; _y++ ) {
        
        for( var _x = 0; _x &lt; grid_width; _x++ ) {
            
            if ( grd_blocks[# _x, _y ] == 1 ) continue;
            
            if ( _x != 0 ) and ( grd_blocks[# _x - 1, _y ] == 0 ) {
                
                var _region = grd_regions[# _x - 1, _y ];
                
                if ( _region != 0 ) {
                    
                    grd_regions[# _x, _y ] = _region;
                    var _map = map_regions[? _region ];
                    _map[? "right" ] = _x;
                    
                }
                
            } else {
                
                regions_total++;
                grd_regions[# _x, _y ] = regions_total;
                
                var _map = ds_map_create();
                ds_map_add_map( map_regions, regions_total, _map );
                _map[? "left"   ] = _x;
                _map[? "top"    ] = _y;
                _map[? "right"  ] = _x;
                _map[? "bottom" ] = _y;
                
            }
            
        }
        
    }
    
    for( var _i = 0; _i &lt;= regions_total; _i++ ) {
        
        var _i_map = ds_map_find_value( map_regions, _i );
        if ( is_undefined( _i_map ) ) continue;
        
        var _i_left   = _i_map[? "left"   ];
        var _i_right  = _i_map[? "right"  ];
        var _i_bottom = _i_map[? "bottom" ] + 1;
        
        for( var _j = _i + 1; _j &lt;= regions_total; _j++ ) {
            
            var _j_map = ds_map_find_value( map_regions, _j );
            if ( is_undefined( _j_map ) ) continue;
        
            var _j_left   = _j_map[? "left"  ];
            var _j_right  = _j_map[? "right" ];
            var _j_top    = _j_map[? "top"   ];
            var _j_bottom = _j_map[? "bottom" ];
            
            if ( _i_left == _j_left ) and ( _i_right == _j_right ) and ( _i_bottom == _j_top ) {
                
                ds_grid_set_region( grd_regions,   _j_left, _j_top, _j_right, _j_bottom,   _i );
                
                _i_map[? "bottom" ] = _j_bottom;
                _i_bottom = _j_bottom + 1;
                
                ds_map_delete( map_regions, _j );
                
            }
            
        }
        
    }
    
    regions_total = 0;
    ds_list_add( lst_regions, undefined );
    
    for( var _i = ds_map_find_first( map_regions ); _i != undefined; _i = ds_map_find_next( map_regions, _i ) ) {
        
        regions_total++;
        
        var _i_map = map_regions[? _i ];
        ds_list_add( lst_regions, _i_map );
        ds_list_mark_as_map( lst_regions, regions_total );
        
        var _i_left   = _i_map[? "left"  ];
        var _i_right  = _i_map[? "right" ];
        var _i_top    = _i_map[? "top"   ];
        var _i_bottom = _i_map[? "bottom" ];
        ds_grid_set_region( grd_regions,   _i_left, _i_top, _i_right, _i_bottom,   regions_total );
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

if ( point_in_rectangle( mouse_grid_x, mouse_grid_y,   0, 0, grid_width - 1, grid_height - 1 ) ) {
    draw_text( 5, 5, grd_regions[# mouse_grid_x, mouse_grid_y ] );
}

if ( regions_total &gt; 0 ) {
    
    for( var _y = 0; _y &lt; grid_height; _y++ ) {
        var _world_y = grid_world_top + _y * cell_height;
        
        for( var _x = 0; _x &lt; grid_width; _x++ ) {
            var _world_x = grid_world_left + _x * cell_width;
            
            if ( grd_regions[# _x, _y ] == 0 ) {
                draw_set_colour( c_white );
            } else {
                draw_set_colour( make_colour_hsv( 255 * grd_regions[# _x, _y ] / ( regions_total + 1 ), 220, 220 ) );
            }
            
            draw_rectangle( _world_x, _world_y, _world_x + cell_width - 1, _world_y + cell_height - 1, false );
            
        }
        
    }

} else {
    
    for( var _y = 0; _y &lt; grid_height; _y++ ) {
        var _world_y = grid_world_top + _y * cell_height;
        
        for( var _x = 0; _x &lt; grid_width; _x++ ) {
            var _world_x = grid_world_left + _x * cell_width;
            
            draw_set_colour( merge_colour( c_black, c_white, grd_blocks[# _x, _y ] ) );
            draw_rectangle( _world_x, _world_y, _world_x + cell_width - 1, _world_y + cell_height - 1, false );
            
        }
        
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
